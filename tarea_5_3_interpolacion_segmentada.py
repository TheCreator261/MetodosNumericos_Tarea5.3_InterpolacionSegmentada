# -*- coding: utf-8 -*-
"""Tarea 5.3 Interpolacion Segmentada.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LhiOGOk7X8N9SxwU3mV4Wy15INPj554x
"""

#Antonio Josue Rodriguez Falcon
#Ejercicio 1: Análisis de Esfuerzos en una Viga

import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d

# Datos del problema
longitud = np.array([0.0, 1.0, 2.0, 3.0, 4.0, 5.0])
deflexion = np.array([0.0, -1.5, -2.8, -3.0, -2.7, -2.0])

# 1. Realizar interpolaciones segmentadas
lineal = interp1d(longitud, deflexion, kind='linear')
cuadratica = interp1d(longitud, deflexion, kind='quadratic')
cubica = interp1d(longitud, deflexion, kind='cubic')

# Puntos para graficar
x_vals = np.linspace(0, 5, 100)
y_lineal = lineal(x_vals)
y_cuadratica = cuadratica(x_vals)
y_cubica = cubica(x_vals)

# 2. Comparar estimaciones en punto intermedio (x=2.5)
x_eval = 2.5
print(f"Estimación en x={x_eval}m:")
print(f"Lineal: {lineal(x_eval):.3f} mm")
print(f"Cuadrática: {cuadratica(x_eval):.3f} mm")
print(f"Cúbica: {cubica(x_eval):.3f} mm")

# 3. Graficar resultados
plt.figure(figsize=(10,6))
plt.scatter(longitud, deflexion, color='black', s=100, label='Datos experimentales')
plt.plot(x_vals, y_lineal, '--', label='Interpolación Lineal', linewidth=2)
plt.plot(x_vals, y_cuadratica, '-.', label='Interpolación Cuadrática', linewidth=2)
plt.plot(x_vals, y_cubica, label='Interpolación Cúbica', linewidth=2)
plt.xlabel('Longitud de la viga (m)', fontsize=12)
plt.ylabel('Deflexión (mm)', fontsize=12)
plt.title('Comparación de métodos de interpolación para deflexión de viga', fontsize=14)
plt.legend(fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.savefig('ejercicio1_interpolacion.png', dpi=300, bbox_inches='tight')
plt.show()

#Antonio Josue Rodriguez Falcon
#Ejercicio 2: Variación de la Temperatura en un Motor

import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d

# Datos del problema
distancia = np.array([0.0, 1.0, 2.0, 3.0, 4.0, 5.0])
temperatura = np.array([250, 220, 180, 150, 130, 125])

# 1. Realizar interpolaciones segmentadas
lineal = interp1d(distancia, temperatura, kind='linear')
cuadratica = interp1d(distancia, temperatura, kind='quadratic')
cubica = interp1d(distancia, temperatura, kind='cubic')

# Puntos para graficar
x_vals = np.linspace(0, 5, 100)
y_lineal = lineal(x_vals)
y_cuadratica = cuadratica(x_vals)
y_cubica = cubica(x_vals)

# 2. Comparar estimaciones en punto intermedio (x=2.5)
x_eval = 2.5
print(f"Estimación en x={x_eval} cm:")
print(f"Lineal: {lineal(x_eval):.1f} °C")
print(f"Cuadrática: {cuadratica(x_eval):.1f} °C")
print(f"Cúbica: {cubica(x_eval):.1f} °C")

# 3. Graficar resultados
plt.figure(figsize=(10,6))
plt.scatter(distancia, temperatura, color='black', s=100, label='Datos experimentales')
plt.plot(x_vals, y_lineal, '--', label='Interpolación Lineal', linewidth=2)
plt.plot(x_vals, y_cuadratica, '-.', label='Interpolación Cuadrática', linewidth=2)
plt.plot(x_vals, y_cubica, label='Interpolación Cúbica', linewidth=2)
plt.xlabel('Distancia desde la cabeza del cilindro (cm)', fontsize=12)
plt.ylabel('Temperatura (°C)', fontsize=12)
plt.title('Comparación de métodos de interpolación para temperatura en motor', fontsize=14)
plt.legend(fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.savefig('ejercicio2_interpolacion.png', dpi=300, bbox_inches='tight')
plt.show()

#Antonio Josue Rodriguez Falcon
#Ejercicio 3: Ajuste de la Curva de Consumo de Combustible

import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d

# Datos del problema
velocidad = np.array([40, 60, 80, 100, 120, 140])
consumo = np.array([6.5, 5.8, 5.5, 5.7, 6.2, 7.0])

# 1. Realizar interpolaciones segmentadas
lineal = interp1d(velocidad, consumo, kind='linear')
cuadratica = interp1d(velocidad, consumo, kind='quadratic')
cubica = interp1d(velocidad, consumo, kind='cubic')

# Puntos para graficar
x_vals = np.linspace(40, 140, 100)
y_lineal = lineal(x_vals)
y_cuadratica = cuadratica(x_vals)
y_cubica = cubica(x_vals)

# 2. Comparar estimaciones en punto intermedio (v=90 km/h)
v_eval = 90
print(f"Estimación en v={v_eval} km/h:")
print(f"Lineal: {lineal(v_eval):.2f} L/100km")
print(f"Cuadrática: {cuadratica(v_eval):.2f} L/100km")
print(f"Cúbica: {cubica(v_eval):.2f} L/100km")

# 3. Graficar resultados
plt.figure(figsize=(10,6))
plt.scatter(velocidad, consumo, color='black', s=100, label='Datos experimentales')
plt.plot(x_vals, y_lineal, '--', label='Interpolación Lineal', linewidth=2)
plt.plot(x_vals, y_cuadratica, '-.', label='Interpolación Cuadrática', linewidth=2)
plt.plot(x_vals, y_cubica, label='Interpolación Cúbica', linewidth=2)
plt.xlabel('Velocidad (km/h)', fontsize=12)
plt.ylabel('Consumo (L/100 km)', fontsize=12)
plt.title('Comparación de métodos de interpolación para consumo de combustible', fontsize=14)
plt.legend(fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.savefig('ejercicio3_interpolacion.png', dpi=300, bbox_inches='tight')
plt.show()